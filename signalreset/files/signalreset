#!/bin/sh

THRESHOLD=$(uci -q get signalreset.signalreset.threshold)
CHECK_PERIOD=$(uci -q get signalreset.signalreset.check_period)
reconnect() {
    AT_RESULT=$(gsmctl -A ""AT+COPS=2"" -O $1)

    case "$AT_RESULT" in
*OK*) logger "[SIGNALRESET] $1 modem turned OFF" ;;
*      ) logger "[SIGNALRESET] ERROR turning $1 modem OFF" ;;
esac

    sleep 5
    AT_RESULT=$(gsmctl -A ""AT+COPS=0"" -O $1)
    case "$AT_RESULT" in
*OK*) logger "[SIGNALRESET] $1 modem turned ON" ;;
*      ) logger "[SIGNALRESET] ERROR turning $1 modem ON" ;;
esac

}

#read modems json portion from board.json file
read_modem_json() {
    board=$(cat /etc/board.json)

    board=${board#*\"modems\": }
    modems=${board%]*}
}

#checks if the modem is active.
is_active() {
    AT_RESULT=$(gsmctl -A ""AT"" -O $1)

    case "$AT_RESULT" in
*OK*) RESULT=1 ;;
*      ) RESULT=0 ;;
esac
}

#parses modems and writes modems which are active into ACTIVE_MODEMS space separated array.
parse_modems() {
    modemsc=${modems}
    run=1
    ACTIVE_MODEMS=""

    while [ $run -eq 1 ]; do
        iter=${modemsc#*\"id\": \"}
        iter=${iter%%\"*}

        is_active $iter
        if [[ $RESULT -eq 1 ]]; then
        ACTIVE_MODEMS="${ACTIVE_MODEMS} $iter"
        fi
        modemsc="${modemsc#*$iter\",}"
        [[ ! -z "$iter" -a "$iter" != " " ]] && run=0 || run=1
    done
    logger "[SIGNALRESET] Active modems: $ACTIVE_MODEMS"
}

read_modem_json
parse_modems

while true; do
    for MODEM in ${ACTIVE_MODEMS}; do
        signal=$(gsmctl --signal -O $MODEM)
        logger "[SIGNALRESET] $MODEM modem signal: $signal"
        if [[ $signal -lt $THRESHOLD ]]; then
            logger "[SIGNALRESET] $signal is less than $THRESHOLD"
            logger "[SIGNALRESET] Restarting modem.."
            reconnect $MODEM
        fi
    done
    
	sleep $CHECK_PERIOD
done

